// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// generator client {
//   provider = "prisma-client-js"
//   previewFeatures = ["jsonProtocol"]
// }

// datasource db {
//   provider = "postgresql"
//   url = env("POSTGRES_PRISMA_URL") // uses connection pooling
//   directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
// }

generator client {
  provider = "prisma-client-js"
}


datasource db {
  provider     = "mysql"
  url          = env("MYSQL_PRISMA_URL")
  relationMode = "prisma"
}


model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Subscription{
  id String @id @default(cuid())
  userId String
  type String
  validUntil DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  role          String    @default("user")
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  subscriptions Subscription[]
  lessons       Lesson[]
  courses       Course[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Lesson {
  id            String   @id @default(cuid())
  title         String?  @db.Text
  description   String?  @db.Text
  content       String?  @db.Text
  slug          String   @default(cuid())
  image         String?  @db.Text
  imageBlurhash String?  @db.Text
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  published     Boolean  @default(false)
  course        Course?    @relation(fields: [courseId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  courseId      String?
  user          User?    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId        String?

  @@unique([slug, courseId])
  @@index([courseId])
  @@index([userId])
}

model Course {
  id            String   @id @default(cuid())
  name          String?
  description   String?  @db.Text
  font          String   @default("font-display")
  image         String?  @db.Text
  imageBlurhash String?  @db.Text
  slug          String?  @unique
  message404    String?  @db.Text
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  status        String   @default("Draft")
  user          User?    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId        String?
  lessons       Lesson[]

  @@index([userId])
}